---
- name: Clonează repositoriul NextJS de pe un branch specific
  git:
    repo: 'https://{{ github_username }}:{{ github_token }}@github.com/dariusbrinzan/Licenta.git'
    dest: '/home/ubuntu/Licenta'
    version: '{{ nextjs_repo_branch }}'
    clone: yes
    update: yes

- name: Clonează repositoriul NextJS config de pe un branch specific
  git:
    repo: 'https://{{ github_username }}:{{ github_token }}@github.com/dariusbrinzan/License_Config.git'
    dest: '/home/ubuntu/Config'
    version: '{{ config_repo_branch }}'
    clone: yes
    update: yes

- name: Verifică dacă imaginea Docker există
  shell: docker images -q nextjs_license:latest
  register: docker_image_check
  become: true

- name: Construiește imaginea Docker folosind Dockerfile din directorul Licenta
  shell: docker build -t nextjs_license .
  args:
    chdir: /home/ubuntu/Licenta
  become: true
  when: docker_image_check.stdout == ""

- name: Verifică dacă imaginea Docker a fost creată
  shell: docker images -q nextjs_license:latest
  register: docker_image_check
  failed_when: docker_image_check.stdout == ""
  become: true

- name: Instalează pip3
  become: true
  ansible.builtin.apt:
    name: python3-pip
    state: present
    update_cache: yes

- name: Instalează Docker SDK pentru Python
  become: true
  ansible.builtin.pip:
    name: docker
    state: present

- name: Actualizează biblioteca Docker pentru Python
  ansible.builtin.pip:
    name: docker
    state: latest
  become: true

- name: Dezinstalează docker-compose vechi
  ansible.builtin.pip:
    name: docker-compose
    state: absent
  become: true

- name: Instalează cea mai recentă versiune de Docker Compose
  ansible.builtin.pip:
    name: docker-compose
    state: latest
  become: true

- name: Creează o rețea Docker pentru containere
  become: true
  community.docker.docker_network:
    name: nextjs_network
    state: present

- name: Rulează primul container Docker din imaginea nextjs_license pe rețeaua Docker
  become: true
  community.docker.docker_container:
    name: "nextjs_app1"
    image: nextjs_license:latest
    state: started
    networks:
      - name: nextjs_network
    ports:
      - "3001:3000"
    restart_policy: always

- name: Rulează al doilea container Docker din imaginea nextjs_license pe rețeaua Docker
  become: true
  community.docker.docker_container:
    name: nextjs_app2
    image: nextjs_license:latest
    state: started
    networks:
      - name: nextjs_network
    ports:
      - "3002:3000"
    restart_policy: always

- name: Rulează un container Elasticsearch
  become: true
  community.docker.docker_container:
    name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    state: started
    networks:
      - name: nextjs_network
    ports:
      - "9200:9200"
    volumes:
      - "/home/ubuntu/Config/K8s/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
    env:
      discovery.type: single-node
    restart_policy: always

- name: Rulează un container Kibana
  become: true
  community.docker.docker_container:
    name: kibana
    image: docker.elastic.co/kibana/kibana:7.10.1
    state: started
    networks:
      - name: nextjs_network
    ports:
      - "5601:5601"
    env:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
    restart_policy: always

- name: Rulează containerul Nginx ca balansator de încărcare
  become: true
  community.docker.docker_container:
    name: nginx_load_balancer
    image: nginx:latest
    state: started
    networks:
      - name: nextjs_network
    ports:
      - "8080:80"
    volumes:
      - "/home/ubuntu/Config/K8s/nginx.conf:/etc/nginx/nginx.conf"
    restart_policy: always

- name: Setează permisiunile fișierului filebeat.yml
  file:
    path: /home/ubuntu/Config/K8s/filebeat.yml
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: true

- name: Rulează un container Filebeat
  become: true
  community.docker.docker_container:
    name: filebeat
    image: docker.elastic.co/beats/filebeat:7.10.1
    state: started
    networks:
      - name: nextjs_network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/home/ubuntu/Config/K8s/filebeat.yml:/usr/share/filebeat/filebeat.yml"
    restart_policy: always

# - name: Rulează Docker Compose
#   become: true
#   community.docker.docker_compose:
#     project_src: /home/ubuntu/Config/K8s
#     state: present
#   register: docker_compose_result

# - name: Afișează rezultatul Docker Compose
#   become: true
#   ansible.builtin.debug:
#     var: docker_compose_result


# - name: Desfășurare aplicație Next.js în Minikube
#   become: true
#   ansible.builtin.command:
#     cmd: kubectl apply -f "/home/ubuntu/Config/K8s/deployment.yaml"
#   register: deployment_result

# - name: Afișează rezultatul desfășurării
#   ansible.builtin.debug:
#     var: deployment_result.stdout_lines
