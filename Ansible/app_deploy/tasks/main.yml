---
- name: Clonează repositoriul NextJS de pe un branch specific
  git:
    repo: 'https://{{ github_username }}:{{ github_token }}@github.com/dariusbrinzan/Licenta.git'
    dest: '/home/ubuntu/Licenta'
    version: '{{ nextjs_repo_branch }}'
    clone: yes
    update: yes

- name: Clonează repositoriul NextJS config de pe un branch specific
  git:
    repo: 'https://{{ github_username }}:{{ github_token }}@github.com/dariusbrinzan/License_Config.git'
    dest: '/home/ubuntu/Config'
    version: '{{ config_repo_branch }}'
    clone: yes
    update: yes

- name: Verifică dacă imaginea Docker există
  shell: docker images -q nextjs_license:latest
  register: docker_image_check
  become: true

- name: Construiește imaginea Docker folosind Dockerfile din directorul Licenta
  shell: docker build -t nextjs_license .
  args:
    chdir: /home/ubuntu/Licenta
  become: true
  when: docker_image_check.stdout == ""

- name: Verifică dacă imaginea Docker a fost creată
  shell: docker images -q nextjs_license:latest
  register: docker_image_check
  failed_when: docker_image_check.stdout == ""
  become: true

- name: Instalează pip3
  become: true
  ansible.builtin.apt:
    name: python3-pip
    state: present
    update_cache: yes

- name: Instalează Docker SDK pentru Python
  become: true
  ansible.builtin.pip:
    name: docker
    state: present

- name: Actualizează biblioteca Docker pentru Python
  ansible.builtin.pip:
    name: docker
    state: latest
  become: true

- name: Dezinstalează docker-compose vechi
  ansible.builtin.pip:
    name: docker-compose
    state: absent
  become: true

- name: Instalează cea mai recentă versiune de Docker Compose
  ansible.builtin.pip:
    name: docker-compose
    state: latest
  become: true

- name: Creează o rețea Docker pentru containere folosind CLI
  become: true
  ansible.builtin.command:
    cmd: docker network create nextjs_network
  args:
    creates: /var/run/docker/netns/nextjs_network

- name: Rulează primul container Docker din imaginea nextjs_license pe rețeaua Docker
  become: true
  ansible.builtin.command:
    cmd: docker run -d --name nextjs_app1 --network nextjs_network -p 3001:3000 --restart always nextjs_license:latest

- name: Rulează al doilea container Docker din imaginea nextjs_license pe rețeaua Docker
  become: true
  ansible.builtin.command:
    cmd: docker run -d --name nextjs_app2 --network nextjs_network -p 3002:3000 --restart always nextjs_license:latest

- name: Rulează un container Elasticsearch
  become: true
  ansible.builtin.command:
    cmd: >
      docker run -d --name elasticsearch --network nextjs_network -p 9200:9200
      -v /home/ubuntu/Config/K8s/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      --env discovery.type=single-node --restart always docker.elastic.co/elasticsearch/elasticsearch:7.10.1

- name: Rulează un container Kibana
  become: true
  ansible.builtin.command:
    cmd: >
      docker run -d --name kibana --network nextjs_network -p 5601:5601
      --env ELASTICSEARCH_URL=http://elasticsearch:9200 --restart always docker.elastic.co/kibana/kibana:7.10.1

- name: Rulează containerul Nginx ca balansator de încărcare
  become: true
  ansible.builtin.command:
    cmd: >
      docker run -d --name nginx_load_balancer --network nextjs_network -p 8080:80
      -v /home/ubuntu/Config/K8s/nginx.conf:/etc/nginx/nginx.conf --restart always nginx:latest

- name: Setează permisiunile fișierului filebeat.yml
  become: true
  ansible.builtin.file:
    path: /home/ubuntu/Config/K8s/filebeat.yml
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Rulează un container Filebeat
  become: true
  ansible.builtin.command:
    cmd: >
      docker run -d --name filebeat --network nextjs_network
      -v /var/run/docker.sock:/var/run/docker.sock
      -v /home/ubuntu/Config/K8s/filebeat.yml:/usr/share/filebeat/filebeat.yml
      --restart always docker.elastic.co/beats/filebeat:7.10.1
